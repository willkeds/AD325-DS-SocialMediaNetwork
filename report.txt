SocialMediaSystem Class Workflow
	The SocialMediaSystem class is a fundamental component of our social media management system designed to allow users to create profiles, manage friendships, view network graphs, and load profiles from CSV files. The system facilitates user interactions through a menu-driven interface and provides essential features such as profile creation, deletion, and modifications, along with social networking functionalities like adding friends and viewing network connections. This report outlines the overall workflow of the system, detailing the key steps and operations within the SocialMediaSystem class.

System Initialization and Setup
	The SocialMediaSystem class is initialized by creating instances of necessary components. Upon instantiation, the system initializes the ProfileManager, which is responsible for managing user profiles. The ProfileManager interacts with a custom LinkedDictionary to store profiles, allowing easy addition, deletion, and retrieval. Alongside, an empty dictionary connections is initialized to manage the friendships between users. Additionally, the current_user variable is set to None initially, representing no active user. The menu() method is called to display the main user interface for interaction.

	When the system starts, it checks whether any profiles already exist. If no profiles are found, the user is prompted to create an admin profile, ensuring the system can operate with at least one user.

Menu Display and User Interaction
	The system then proceeds to display the main menu, which offers the user several options to interact with the social media platform. These options include creating a profile, modifying an existing profile, viewing profiles in BFS or DFS order, adding friends, viewing friend lists, and more. Each option corresponds to a specific action, and the system waits for the user to select an option.

	When the user inputs a choice, the system processes it and performs the corresponding operation. This menu-driven interface makes it easy for users to navigate through the different features of the system. The system continuously loops through the menu, allowing users to perform various actions in any order.

Profile Management

	The system allows users to create, modify, and delete profiles, providing flexibility in how users manage their presence on the platform.

Creating a Profile: 
	If the user selects the option to create a profile, they are prompted to enter their profile details, such as name, location, age, and occupation. The add_profile() method is invoked, which checks if the profile already exists in the system. If the profile does not exist, a new UserProfile instance is created and added to the system. A confirmation message is displayed to the user once the profile is created successfully.

Modifying a Profile: 
	Users can modify their profile by selecting the modify option. This allows users to update fields such as their status or occupation. The system checks for valid fields and updates the profile accordingly.

Deleting a Profile: 
	Users can also choose to delete a profile. When this option is selected, the system prompts the user for the profile name, and upon confirmation, the remove_profile() method is invoked. This method removes the profile from the system, including cleaning up any references to the profile from other users' friend lists.

Friendship Management

Adding a Friend: 
	To add a friend, the user selects the option to add a friend and is prompted to enter the name of the friend they wish to connect with. The system checks if both the current user and the friend exist in the system. If both profiles are valid, the connect_profiles() method is called, establishing a two-way connection between the profiles. The friend is added to both users' friend lists, and a success message is displayed.

Viewing Friend List: 
	Users can view their friend list by selecting the option to see their friends. The system retrieves the current user’s friend list from the connections dictionary and displays it, showing the names of all friends the current user is connected to.

Viewing Friend’s Friend List: 
	This feature allows the user to view their friend’s friend list. The system first retrieves the list of friends of the current user, then displays the friends of each of those friends. This helps visualize the network of connections within the social media system.

Profile Display
	The system provides options to view profiles either in Breadth-First Search (BFS) or Depth-First Search (DFS) order. The BFS and DFS algorithms provide different ways to explore the profiles connected to the current user. Users are given the option to choose the traversal method, and the system displays the profiles accordingly. The BFS order retrieves profiles level by level, while DFS explores deeper levels first, making the choice of traversal method flexible depending on the user’s preference.

CSV Profile Loading
	Another key feature of the system is the ability to load profiles from a CSV file. This functionality is essential for importing large sets of data, such as when transferring data from another platform or populating the system with initial profiles. When the user selects the option to load profiles from a CSV file, the read_profiles_from_csv() method is invoked. The proper path is defined as "data/profiles.csv". This method reads the CSV file and processes each row to add profiles to the system. After loading the profiles, the system then reads the file again to establish friendships based on the "friends" column in the CSV. Profiles are connected using the connect_profiles() method, and a confirmation message is displayed once all profiles and connections have been successfully loaded.

Network Visualization
	In addition to managing profiles and friendships, the system allows users to visualize their social network as a graph. By selecting the option to create a network graph, the system generates a graph representation of the current user's network using the graphviz library. The system uses Depth-First Search (DFS) to explore the network, with a configurable depth parameter to control how far the graph should extend. Once the graph is generated, it is rendered as a PNG image, and a success message is displayed to the user.

Switching Users
	The system allows the administrator or other users to switch the current user. This feature is useful in scenarios where the system has multiple users, and the admin or a different user needs to interact with the platform. The system checks whether the requested user exists, and if valid, switches to that user. The current user is updated, and the menu is refreshed for the new user.

Logout
	The system allows users to log out and end their session. This feature is triggered when the user selects the logout option from the menu. Upon logging out, the program terminates, and the user is no longer able to interact with the system.
